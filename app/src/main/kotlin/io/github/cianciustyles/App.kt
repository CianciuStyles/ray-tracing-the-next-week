
/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.github.cianciustyles

import java.io.File
import java.util.stream.IntStream
import kotlin.random.Random

private fun randomScene(): HittableList {
    val world = HittableList()

    val checker = CheckerTexture(
        Color(0.2, 0.3, 0.1),
        Color(0.9, 0.9, 0.9)
    )
    world.add(Sphere(
        Point3(0.0, -1000.0, 0.0),
        1000.0,
        Lambertian(checker
    )))

    for (a in -11 until 11) {
        for (b in -11 until 11) {
            val chooseMaterial = Random.nextDouble()
            val center = Point3(a + 0.9 * Random.nextDouble(), 0.2, b + 0.9 * Random.nextDouble())

            if ((center - Point3(4.0, 0.2, 0.0)).length() > 0.9) {
                when {
                    chooseMaterial < 0.8 -> {
                        // diffuse
                        val albedo = Color.random() * Color.random()
                        val sphereMaterial = Lambertian(albedo)
                        val center2 = center + Vector3(0.0, Random.nextDouble(0.5), 0.0)
                        world.add(MovingSphere(center, center2, 0.0, 1.0, 0.2, sphereMaterial))
                    }
                    0.8 <= chooseMaterial && chooseMaterial < 0.95 -> {
                        // metal
                        val albedo = Color.random(0.5, 1.0)
                        val fuzz = Random.nextDouble(0.0, 0.5)
                        val sphereMaterial = Metal(albedo, fuzz)
                        world.add(Sphere(center, 0.2, sphereMaterial))
                    }
                    else -> {
                        // glass
                        val sphereMaterial = Dielectric(1.5)
                        world.add(Sphere(center, 0.2, sphereMaterial))
                    }
                }
            }
        }
    }

    val material1 = Dielectric(1.5)
    world.add(Sphere(
        Point3(0.0, 1.0, 0.0),
        1.0,
        material1
    ))

    val material2 = Lambertian(Color(0.4, 0.2, 0.1))
    world.add(Sphere(
        Point3(-4.0, 1.0, 0.0),
        1.0,
        material2
    ))

    val material3 = Metal(Color(0.7, 0.6, 0.5), 0.0)
    world.add(Sphere(
        Point3(4.0, 1.0, 0.0),
        1.0,
        material3
    ))

    return world
}

fun twoSpheres(): HittableList {
    val objects = HittableList()

    val checker = CheckerTexture(Color(0.2, 0.3, 0.1), Color(0.9, 0.9, 0.9))
    objects.add(Sphere(
        Point3(0.0, -10.0, 0.0),
        10.0,
        Lambertian(checker)
    ))
    objects.add(Sphere(
        Point3(0.0, 10.0, 0.0),
        10.0,
        Lambertian(checker)
    ))

    return objects
}

fun twoPerlinSpheres(): HittableList {
    val objects = HittableList()

    val perlinTexture = NoiseTexture(4.0)
    objects.add(Sphere(
        Point3(0.0, -1000.0, 0.0),
        1000.0,
        Lambertian(perlinTexture)
    ))
    objects.add(Sphere(
        Point3(0.0, 2.0, 0.0),
        2.0,
        Lambertian(perlinTexture)
    ))

    return objects
}

fun earth(): HittableList {
    val earthTexture = ImageTexture("earthmap.jpg")
    val earthSurface = Lambertian(earthTexture)
    val globe = Sphere(radius = 2.0, material = earthSurface)

    return HittableList(mutableListOf(globe))
}

fun simpleLight(): HittableList {
    val objects = HittableList()

    val perlinTexture = NoiseTexture(4.0)
    objects.add(Sphere(
        Point3(y = -1000.0),
        1000.0,
        Lambertian(perlinTexture)
    ))
    objects.add(Sphere(
        Point3(y = 2.0),
        2.0,
        Lambertian(perlinTexture)
    ))

    val light = DiffuseLight(Color(4.0, 4.0, 4.0))
    objects.add(XyRect(light, 3.0, 5.0, 1.0, 3.0, -2.0))

    return objects
}

fun cornellBox(): HittableList {
    val objects = HittableList()

    val red = Lambertian(Color(0.65, 0.05, 0.05))
    val white = Lambertian(Color(0.73, 0.73, 0.73))
    val green = Lambertian(Color(0.12, 0.45, 0.15))
    val light = DiffuseLight(Color(15.0, 15.0, 15.0))

    objects.add(YzRect(green, 0.0, 555.0, 0.0, 555.0, 555.0))
    objects.add(YzRect(red, 0.0, 555.0, 0.0, 555.0, 0.0))
    objects.add(XzRect(light, 213.0, 343.0, 227.0, 332.0, 554.0))
    objects.add(XzRect(white, 0.0, 555.0, 0.0, 555.0, 0.0))
    objects.add(XzRect(white, 0.0, 555.0, 0.0, 555.0, 555.0))
    objects.add(XyRect(white, 0.0, 555.0, 0.0, 555.0, 555.0))

    var box1: Hittable = Box(white, Point3(), Point3(165.0, 330.0, 165.0))
    box1 = RotateY(box1, 15.0)
    box1 = Translate(box1, Vector3(265.0, 0.0, 295.0))
    objects.add(box1)

    var box2: Hittable = Box(white, Point3(), Point3(165.0, 165.0, 165.0))
    box2 = RotateY(box2, -18.0)
    box2 = Translate(box2, Vector3(130.0, 0.0, 65.0))
    objects.add(box2)

    return objects
}

fun cornellSmoke(): HittableList {
    val objects = HittableList()

    val red = Lambertian(Color(0.65, 0.05, 0.05))
    val white = Lambertian(Color(0.73, 0.73, 0.73))
    val green = Lambertian(Color(0.12, 0.45, 0.15))
    val light = DiffuseLight(Color(7.0, 7.0, 7.0))

    objects.add(YzRect(green, 0.0, 555.0, 0.0, 555.0, 555.0))
    objects.add(YzRect(red, 0.0, 555.0, 0.0, 555.0, 0.0))
    objects.add(XzRect(light, 113.0, 443.0, 127.0, 432.0, 554.0))
    objects.add(XzRect(white, 0.0, 555.0, 0.0, 555.0, 555.0))
    objects.add(XzRect(white, 0.0, 555.0, 0.0, 555.0, 0.0))
    objects.add(XyRect(white, 0.0, 555.0, 0.0, 555.0, 555.0))

    var box1: Hittable = Box(white, Point3(), Point3(165.0, 330.0, 165.0))
    box1 = RotateY(box1, 15.0)
    box1 = Translate(box1, Vector3(265.0, 0.0, 295.0))

    var box2: Hittable = Box(white, Point3(), Point3(165.0, 165.0, 165.0))
    box2 = RotateY(box2, -18.0)
    box2 = Translate(box2, Vector3(130.0, 0.0, 65.0))

    objects.add(ConstantMedium(box1, 0.01, Color.BLACK))
    objects.add(ConstantMedium(box2, 0.01, Color.WHITE))

    return objects
}

fun finalScene(): HittableList {
    val boxes1 = HittableList()
    val ground = Lambertian(Color(0.48, 0.83, 0.53))

    val boxesPerSide = 20
    for (i in 0 until boxesPerSide) {
        for (j in 0 until boxesPerSide) {
            val w = 100.0
            val x0 = -1000.0 + i * w
            val z0 = -1000.0 + j * w
            val y0 = 0.0
            val x1 = x0 + w
            val y1 = Random.nextDouble(1.0, 101.0)
            val z1 = z0 + w

            boxes1.add(Box(
                ground,
                Point3(x0, y0, z0),
                Point3(x1, y1, z1)
            ))
        }
    }

    val objects = HittableList()
    objects.add(BvhNode(boxes1, 0.0, 1.0))

    val light = DiffuseLight(Color(7.0, 7.0, 7.0))
    objects.add(XzRect(light, 123.0, 423.0, 147.0, 412.0, 554.0))

    val center1 = Point3(400.0, 400.0, 200.0)
    val center2 = center1 + Vector3(x = 30.0)
    val movingSphereMaterial = Lambertian(Color(0.7, 0.3, 0.1))
    objects.add(MovingSphere(center1, center2, 0.0, 1.0, 50.0, movingSphereMaterial))

    objects.add(Sphere(Point3(260.0, 150.0, 45.0), 50.0, Dielectric(1.5)))
    objects.add(Sphere(
        Point3(0.0, 150.0, 145.0),
        50.0,
        Metal(Color(0.8, 0.8, 0.9), 1.0)
    ))

    var boundary = Sphere(Point3(360.0, 150.0, 145.0), 70.0, Dielectric(1.5))
    objects.add(boundary)
    objects.add(ConstantMedium(boundary, 0.2, Color(0.2, 0.4, 0.9)))
    boundary = Sphere(Point3(), 5000.0, Dielectric(1.5))
    objects.add(ConstantMedium(boundary, 0.0001, Color.WHITE))

    val earthMap = Lambertian(ImageTexture("earthmap.jpg"))
    objects.add(Sphere(Point3(400.0, 200.0, 400.0), 100.0, earthMap))
    val perlinTexture = NoiseTexture(0.1)
    objects.add(Sphere(Point3(220.0, 280.0, 300.0), 80.0, Lambertian(perlinTexture)))

    val boxes2 = HittableList()
    val white = Lambertian(Color(0.73, 0.73, 0.73))
    val ns = 1000
    for (j in 0 until ns) {
        boxes2.add(Sphere(Point3.random(0.0, 165.0), 10.0, white))
    }

    objects.add(
        Translate(
            RotateY(
                BvhNode(boxes2, 0.0, 1.0),
                15.0)
            ,
            Vector3(-100.0, 270.0, 395.0)
        )
    )

    return objects
}

fun main() {
    // Image
    var aspectRatio = 16.0 / 9.0
    var imageWidth = 400
    var samplesPerPixel = 100
    val maxDepth = 50

    // World
    var world = HittableList()
    var lookFrom = Point3(13.0, 2.0, 3.0)
    var lookAt = Point3()
    var verticalFieldOfView = 20.0
    var aperture = 0.0
    var background = Color.BLACK

    when (8) {
        1 -> run {
            world = randomScene()
            aperture = 0.1
            background = Color(0.7, 0.8, 1.0)
        }

        2 -> run {
            world = twoSpheres()
            background = Color(0.7, 0.8, 1.0)
        }

        3 -> run {
            world = twoPerlinSpheres()
            background = Color(0.7, 0.8, 1.0)
        }

        4 -> run {
            world = earth()
            background = Color(0.7, 0.8, 1.0)
        }

        5 -> run {
            world = simpleLight()
            samplesPerPixel = 400
            lookFrom = Point3(26.0, 3.0, 6.0)
            lookAt = Point3(0.0, 2.0, 0.0)
        }

        6 -> run {
            world = cornellBox()
            aspectRatio = 1.0
            imageWidth = 600
            samplesPerPixel = 200
            lookFrom = Point3(278.0, 278.0, -800.0)
            lookAt = Point3(278.0, 278.0, 0.0)
            verticalFieldOfView = 40.0
        }

        7 -> run {
            world = cornellSmoke()
            aspectRatio = 1.0
            imageWidth = 600
            samplesPerPixel = 200
            lookFrom = Point3(278.0, 278.0, -800.0)
            lookAt = Point3(278.0, 278.0, 0.0)
            verticalFieldOfView = 40.0
        }

        8 -> run {
            world = finalScene()
            aspectRatio = 1.0
            imageWidth = 800
            samplesPerPixel = 10000
            lookFrom = Point3(478.0, 278.0, -600.0)
            lookAt = Point3(278.0, 278.0, 0.0)
            verticalFieldOfView = 40.0;
        }
    }

    // Camera
    val vectorUp = Vector3(0.0, 1.0, 0.0)
    val distanceToFocus = 10.0

    val camera = Camera(
        lookFrom,
        lookAt,
        vectorUp,
        verticalFieldOfView,
        aspectRatio,
        aperture,
        distanceToFocus,
        0.0,
        1.0
    )

    // Render
    val imageHeight = (imageWidth / aspectRatio).toInt()
    File("image.ppm").bufferedWriter().use { image ->
        image.write("")
        image.write("P3\n")
        image.write("$imageWidth $imageHeight\n")
        image.write("255\n")

        for (j in (0 until imageHeight).reversed()) {
            System.err.println("Scanlines remaining: $j")

            for (i in 0 until imageWidth) {
                val pixelColor = IntStream.range(0, samplesPerPixel)
                    .parallel()
                    .mapToObj {
                        val u = (i + Random.nextDouble()) / (imageWidth - 1)
                        val v = (j + Random.nextDouble()) / (imageHeight - 1)
                        val ray = camera.getRay(u, v)
                        ray.rayColor(background, world, maxDepth)
                    }
                    .reduce(Color.BLACK, Color::plus)

                image.write("${pixelColor.writeColor(samplesPerPixel)}\n")
            }
        }
    }

    System.err.println("Done.")
}